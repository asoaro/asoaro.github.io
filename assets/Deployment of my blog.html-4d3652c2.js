import{_ as o,a as i,b as r,c}from"./deploy-37116b40.js";import{_ as l,V as p,W as d,Z as e,$ as n,X as t,Y as u,a0 as a,B as h}from"./framework-73f3449e.js";const b={},g=e("h1",{id:"deployment-of-my-blog",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#deployment-of-my-blog","aria-hidden":"true"},"#"),n(" Deployment of my blog")],-1),m=e("h2",{id:"概述",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#概述","aria-hidden":"true"},"#"),n(" 概述")],-1),_={href:"https://hexo.io/zh-cn/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://v2.vuepress.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer"},v=e("br",null,null,-1),f={href:"https://theme-hope.vuejs.press/zh/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://docs.github.com/zh/Pages",target:"_blank",rel:"noopener noreferrer"},G=e("h2",{id:"部署至-github-pages",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#部署至-github-pages","aria-hidden":"true"},"#"),n(" 部署至 GitHub Pages")],-1),H=e("h3",{id:"基本步骤",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#基本步骤","aria-hidden":"true"},"#"),n(),e("strong",null,"基本步骤")],-1),P={href:"https://theme-hope.vuejs.press/zh/cookbook/tutorial/create.html",target:"_blank",rel:"noopener noreferrer"},A=a(`<h4 id="_1-确保在创建项目时勾选了创建自动部署文档的-github-工作流" tabindex="-1"><a class="header-anchor" href="#_1-确保在创建项目时勾选了创建自动部署文档的-github-工作流" aria-hidden="true">#</a> 1. 确保在创建项目时<strong>勾选</strong>了创建自动部署文档的 GitHub 工作流</h4><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>没勾选也没关系，该步骤只是在<strong>项目根目录</strong>下创建一个用于 GitHub Actions 的工作流 <code>.yml</code> 文件： <code>.github/workflow/deploy-docs.yml</code> ，你完全可以手动创建这个目录，只要确保是在项目根目录下开始创建即可</p><p>若对上述名词感到陌生，可跳至<a href="#%E9%83%A8%E7%BD%B2%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86">部署基本原理</a></p><details class="hint-container details"><summary>默认的 deploy-docs.yml</summary><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">name</span><span class="token punctuation">:</span> 部署文档

<span class="token key atrule">on</span><span class="token punctuation">:</span>
  <span class="token key atrule">push</span><span class="token punctuation">:</span>
    <span class="token key atrule">branches</span><span class="token punctuation">:</span>
      <span class="token comment"># 确保这是你正在使用的分支名称</span>
      <span class="token punctuation">-</span> main

<span class="token key atrule">jobs</span><span class="token punctuation">:</span>
  <span class="token key atrule">deploy-gh-pages</span><span class="token punctuation">:</span>
    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest
    <span class="token key atrule">steps</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v3
        <span class="token key atrule">with</span><span class="token punctuation">:</span>
          <span class="token key atrule">fetch-depth</span><span class="token punctuation">:</span> <span class="token number">0</span>
          <span class="token comment"># 如果你文档需要 Git 子模块，取消注释下一行</span>
          <span class="token comment"># submodules: true</span>

      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 设置 Node.js
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v3
        <span class="token key atrule">with</span><span class="token punctuation">:</span>
          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token number">18</span>
          <span class="token key atrule">cache</span><span class="token punctuation">:</span> npm

      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 安装依赖
        <span class="token key atrule">run</span><span class="token punctuation">:</span> npm ci

      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 构建文档
        <span class="token key atrule">env</span><span class="token punctuation">:</span>
          <span class="token key atrule">NODE_OPTIONS</span><span class="token punctuation">:</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>max_old_space_size=8192
        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token punctuation">-</span>
          npm run docs<span class="token punctuation">:</span>build
          <span class="token punctuation">&gt;</span> src/.vuepress/dist/.nojekyll
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 部署文档
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> JamesIves/github<span class="token punctuation">-</span>pages<span class="token punctuation">-</span>deploy<span class="token punctuation">-</span>action@v4
        <span class="token key atrule">with</span><span class="token punctuation">:</span>
          <span class="token comment"># 这是文档部署到的分支名称</span>
          <span class="token key atrule">branch</span><span class="token punctuation">:</span> gh<span class="token punctuation">-</span>pages
          <span class="token key atrule">folder</span><span class="token punctuation">:</span> src/.vuepress/dist
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details></div><h4 id="_2-选择-github-pages" tabindex="-1"><a class="header-anchor" href="#_2-选择-github-pages" aria-hidden="true">#</a> 2. 选择 GitHub Pages</h4>`,3),x={href:"https://docs.github.com/zh/pages",target:"_blank",rel:"noopener noreferrer"},w=a("<ul><li><p>个人页面：</p><ol><li>必须将整个项目上传至如下仓库：<br><code>https://github.com/GitHub用户名/GitHub用户名.github.io</code><br> 这意味着你在创建仓库时，仓库名必须为如下形式：<br><code>GitHub用户名.github.io</code></li><li>部署成功后的网址为 <code>https://GitHub用户名.github.io/</code></li><li>每个 GitHub 账号只能部署<strong>一个</strong>个人页面</li></ol></li></ul><ul><li><p>项目页面：</p><ol><li>仓库命名没有限制，例如 <code>myproject</code></li><li>部署成功后的网址为 <code>https://GitHub用户名.github.io/GitHub仓库名/</code></li><li>不同于个人页面，项目页面没有数量限制</li></ol></li></ul>",2),E={href:"https://v2.vuepress.vuejs.org/zh/reference/config.html",target:"_blank",rel:"noopener noreferrer"},C=a(`<ul><li>如果你选择部署至个人页面，那么你无需配置 <code>base</code> ，因为其默认值就是 <code>/</code></li><li>如果你选择部署至项目页面，则必须在 <code>config.ts</code> 中配置 <code>base</code>：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineUserConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuepress&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineUserConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 必须以 \`/\` 开头和结束，且路径名必须与GitHub仓库名一致，包括大小写</span>
  base<span class="token operator">:</span> <span class="token string">&#39;/myproject/&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">Note</p><p>部署至 Gitee Pages 的<strong>项目页面</strong>时，倘若你的 Gitee 仓库名中使用了大写字母，则配置 <code>base</code> 时必须转换为<strong>小写字母</strong>，因为 Gitee Pages 在部署时会默认将部署仓库名转换为小写<br> 例如 Gitee 仓库名为 <code>My-Project</code>，则该项目中的 <code>base</code> 就应为 <code>/my-project/</code></p></div><h4 id="_3-触发工作流" tabindex="-1"><a class="header-anchor" href="#_3-触发工作流" aria-hidden="true">#</a> 3. 触发工作流</h4><p>（1） 使用 Git 管理项目后，确保当前处于主分支 <code>main</code>，因为项目默认的 <code>deploy-docs.yml</code> 文件中，是通过 <code>push</code> 指定分支（默认 <code>main</code>）的事件来触发工作流</p><p>无论你是修改 <code>.yml</code> 文件的分支名还是修改 Git 当前的分支名，都必须符合如下两点才能正确触发工作流并部署成功：</p><ul><li>你所 <code>push</code> 的分支与 <code>.yml</code> 文件中的分支一样</li><li>该分支包含项目所有文件（例如主分支）</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 项目默认的 deploy-docs.yml</span>
<span class="token key atrule">on</span><span class="token punctuation">:</span>
  <span class="token key atrule">push</span><span class="token punctuation">:</span>
    <span class="token key atrule">branches</span><span class="token punctuation">:</span>
      <span class="token comment"># 确保这是你正在使用的分支名称</span>
      <span class="token punctuation">-</span> main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2） 提交代码至 GitHub 仓库</p><p>执行 <code>git push</code> 将项目代码上传至你创建好的 GitHub 仓库中，上传成功后便可点开仓库选项卡中的 <code>Actions</code> 选项</p><p>如果前面都配置正确，此时你会在左侧菜单栏 <code>All workflows</code> 列表中看到一个名为 <code>部署文档</code> （项目默认工作流名字）的工作流正在运行，它正是你在 <code>push</code> 分支 <code>main</code> 时触发的工作流，等待一两分钟便可知道运行结果，也可点击该工作流，进入实时的<strong>可视化运行图表</strong>来查看具体的工作流进度</p><figure><img src="`+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果你是<strong>第一次</strong>使用 GitHub Actions，那么上述的工作流大概率会运行失败<br> 因为每个 GitHub 仓库都<strong>默认</strong>只让 GitHub Actions 读取仓库内容，<strong>不允许读写</strong>，因此需为 GitHub Actions <strong>开放</strong>当前仓库的读写权限，否则无法正常构建 GitHub Pages</p><p>点击仓库选项卡 <code>Settings</code>→<code>Actions</code>→<code>General</code>，在 <code>Workflow permissions</code>中选择读写权限 <code>Read and write permissions</code>后，点击保存即可</p><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>当然你也可以在第一次 <code>push</code> 前就修改当前仓库的 GitHub Actions 权限</p></div><p>修改权限后，你可以选择再次执行 <code>git push</code> 以触发工作流（无任何修改的 push 将无法触发），或者点开 <code>Actions</code> 选项卡，点击之前失败的工作流后，选择重新运行所有任务即可，例如：</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>由于当前工作流比较简单，因此在等待两分钟左右即可看到工作流运行成功的绿色箭头，同时你会看到一个由 GitHub Pages 触发的工作流 <code>pages build and deployment</code> 在运行，当它也运行成功后，离部署成功就近在咫尺了</p><h4 id="_4-设置部署分支" tabindex="-1"><a class="header-anchor" href="#_4-设置部署分支" aria-hidden="true">#</a> 4. 设置部署分支</h4><p>vuepress-theme-hope 主题默认的工作流中，是将构建后的 <code>src/.vuepress/dist/</code> 目录 push 到 GitHub 仓库中的 <code>gh-pages</code> 分支（本地仓库没有该分支），因此需要设置部署目录的分支来源</p><p>点击仓库选项卡 <code>Settings</code>-<code>Pages</code> 后，进行如下操作：</p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>选择后不要急着点击上方的部署网址（点了也只是 404 页面），因为 GitHub Pages 会<strong>再次</strong>触发新的 <code>pages build and deployment</code> 工作流，你可以切换到 <code>Actions</code> 选项中去查看，通常只要等待一两分钟就运行成功，此时再去点击部署网址就会发现，成功啦😄！</p><h3 id="部署基本原理" tabindex="-1"><a class="header-anchor" href="#部署基本原理" aria-hidden="true">#</a> <strong>部署基本原理</strong></h3><p>上面讲了一大堆 GitHub Actions，那它到底是什么呢？为什么只要在 push 指定分支时就能自动部署博客呢？</p><p>GitHub Actions 是一个实现持续集成（Continuous integration）和持续交付（Continuous delivery）的平台，你可粗略地理解为一个执行脚本命令的平台</p><p>当你为项目创建了一个工作流，即一系列的脚本命令后，工作流中设置在发生 <code>git push main</code> 这一特定动作时，就开始执行这个工作流，即开始在 GitHub Actions 的虚拟机运行器（runner）上执行一系列的脚本命令</p><p>举个例子，在每次修改博文后，你都需要手动构建，上传代码进行部署，在其他 Web 应用中可能还需要测试，这些每次部署都会重复执行的动作，便可理解为 Actions，只不过现在由 GitHub Actions 自动为我们在虚拟运行器通过脚本命令执行</p>',29),V={class:"hint-container tip"},S=e("p",{class:"hint-container-title"},"深入学习",-1),z={href:"https://github.com/mqyqingfeng/Blog/issues/237",target:"_blank",rel:"noopener noreferrer"},j={href:"https://docs.github.com/zh/actions/learn-github-actions/understanding-github-actions",target:"_blank",rel:"noopener noreferrer"},B={href:"https://github.com/marketplace?type=actions",target:"_blank",rel:"noopener noreferrer"},D=e("div",{class:"hint-container tip"},[e("p",{class:"hint-container-title"},"Actions 命名"),e("p",null,[n("浏览 GitHub 官方的 Actions 市场会发现，所有 Actions 的命名都是基于以下格式："),e("br"),e("code",null,"Github用户名/Actions名")])],-1),N={href:"https://github.com/asoaro/asoaro.github.io/blob/main/.github/workflows/deploy-docs.yml",target:"_blank",rel:"noopener noreferrer"},T=a('<ol><li>检查仓库代码</li><li>安装 Node.js</li><li>安装项目依赖</li><li>构建文档，即 build</li><li>复制用于被百度收录的认证文件到构建目录</li><li>部署文档至 GitHub Pages</li><li>同步当前仓库代码到 Gitee</li><li>部署文档至 Gitee Pages</li></ol><h2 id="部署至-gitee-pages" tabindex="-1"><a class="header-anchor" href="#部署至-gitee-pages" aria-hidden="true">#</a> 部署至 Gitee Pages</h2><p>虽然博客已成功地部署到了 GitHub Pages，但由于不可抗力因素，我必须想办法提高博客的访问速度，于是乎想到了 Gitee Pages</p>',3),W={href:"https://github.com/yanglbme/gitee-pages-action",target:"_blank",rel:"noopener noreferrer"},I={href:"https://github.com/yanglbme/gitee-pages-action#gitee-pages-action",target:"_blank",rel:"noopener noreferrer"},L=a('<div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Gitee Pages 与 GitHub Pages 类似，也分为个人页面和项目页面，使用限制大致相同<br> 若你需要部署至 Gitee Pages 的个人页面，所创建的仓库名应为 <code>Gitee 用户名</code>，部署成功后的网址为 <code>https://Gitee用户名.gitee.io/</code></p></div><h3 id="基本原理" tabindex="-1"><a class="header-anchor" href="#基本原理" aria-hidden="true">#</a> 基本原理</h3><p><code>yanglbme/gitee-pages-action</code> 使用 Python 语言编写，可大致分为两步：</p>',3),M={href:"https://github.com/wearerequired/git-mirror-action",target:"_blank",rel:"noopener noreferrer"},q=a('<div class="hint-container tip"><p class="hint-container-title">Tips</p><p>如果你有其他方法实现同步仓库的话，你可以忽略 <code>name</code> 为 <code>Sync to Gitee</code> 的任务步骤，即不使用这个任务步骤</p></div><p>（2） 第二步就是该 Actions 作者自己编写的，基于同步后的 Gitee 仓库，构建 Gitee Pages</p><p>我们都知道通过 SSH 协议上传代码到远程仓库的配对原则：只有配置在远程仓库的 <strong>SSH 公钥</strong>与本地设备的 <strong>SSH 私钥</strong>配对才允许连接</p><p>因此在该 Actions 中：</p><ul><li>GitHub 仓库和 Gitee 仓库与本地设备需配置<strong>同一套</strong> SSH 公私秘钥</li><li>将本地设备的 <strong>SSH 私钥</strong>配置为 GitHub 仓库专属的<strong>密匙</strong>（secret，或叫令牌）后，GitHub Actions 就有访问该 GitHub 仓库以及 Gitee 仓库的权限，从而实现 Gitee Pages 自动部署</li></ul><h2 id="自定义域名" tabindex="-1"><a class="header-anchor" href="#自定义域名" aria-hidden="true">#</a> 自定义域名</h2><p>解决了网站的访问速度问题，接下来自然就是让网站的域名变得美观，因此我注册了 <code>outofforbit.com</code> 域名并完成了实名认证</p><p>由于是第一次接触域名之类的网络配置，因而并未购置任何服务器，以下是我不断踩坑总结出的两个结论：</p><p>一、无论是部署在 Gitee Pages、腾讯云或其他提供<strong>静态网页托管服务</strong>的平台，只要是在<strong>国内</strong>的服务器，使用自定义域名前，该域名<strong>必须已完成备案</strong></p><div class="hint-container tip"><p class="hint-container-title">In other words</p><p>只要域名解析指向的 IP 地址是国内，就需要进行备案</p></div><p>二、正规流程的域名备案需提供该域名指向的服务器所提供的 <strong>ICP 备案服务码</strong>，这意味着你需要拥有一台服务器</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><ol><li>ICP 备案服务码虽然可以随意购买地到，但为了规避不必要的风险，我还是选择以后自己配置服务器时才进行备案</li><li>阿里云提供的单独购买 ICP 备案服务码（一百大洋），也是需要绑定阿里云相关云产品才能使用，例如云服务器</li></ol></div>',12),F={href:"https://baike.baidu.com/item/%E5%86%85%E5%AE%B9%E5%88%86%E5%8F%91%E7%BD%91%E7%BB%9C/4034265?fromtitle=CDN&fromid=420951&fr=aladdin",target:"_blank",rel:"noopener noreferrer"},O=e("strong",null,"必须经过备案",-1),R=e("h2",{id:"国内各平台的静态网页托管服务",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#国内各平台的静态网页托管服务","aria-hidden":"true"},"#"),n(" 国内各平台的静态网页托管服务")],-1),U={id:"gitee-pages",tabindex:"-1"},J=e("a",{class:"header-anchor",href:"#gitee-pages","aria-hidden":"true"},"#",-1),X={href:"https://gitee.com/help/articles/4136#article-header0",target:"_blank",rel:"noopener noreferrer"},Y=e("li",null,[n("提供"),e("strong",null,"免费"),n("的静态网页托管服务，国内的访问速度也还可以，使用该服务前必须进行"),e("strong",null,"实名认证"),n("（手持身份证的那种）")],-1),Z=e("strong",null,"不支持",-1),$={href:"https://gitee.com/help/articles/4228#article-header0",target:"_blank",rel:"noopener noreferrer"},K={id:"coding",tabindex:"-1"},Q=e("a",{class:"header-anchor",href:"#coding","aria-hidden":"true"},"#",-1),ee={href:"https://coding.net/",target:"_blank",rel:"noopener noreferrer"},ne=e("li",null,"腾讯云旗下一站式 DevOps 研发管理平台，同样可以托管代码，创建代码仓库等",-1),se=e("strong",null,"不再支持",-1),te={href:"https://coding.net/help/docs/pages/operating.html",target:"_blank",rel:"noopener noreferrer"},ae={id:"腾讯云-webify",tabindex:"-1"},oe=e("a",{class:"header-anchor",href:"#腾讯云-webify","aria-hidden":"true"},"#",-1),ie={href:"https://webify.cloudbase.net/",target:"_blank",rel:"noopener noreferrer"},re={href:"https://serverless.cloud.tencent.com/try?c=sf",target:"_blank",rel:"noopener noreferrer"},ce=e("li",null,[n("支持使用"),e("strong",null,"已备案"),n("的自定义域名，默认生成的域名是一大串字符")],-1),le=e("strong",null,"必须",-1),pe=e("strong",null,"云开发按量计费环境",-1),de={href:"https://webify.cloudbase.net/docs/faq/pricing/",target:"_blank",rel:"noopener noreferrer"},ue={class:"hint-container tip"},he=e("p",{class:"hint-container-title"},"PV",-1),be={href:"https://baike.baidu.com/item/%E9%A1%B5%E9%9D%A2%E6%B5%8F%E8%A7%88%E9%87%8F/4239489",target:"_blank",rel:"noopener noreferrer"},ge=e("br",null,null,-1),me={id:"阿里云-codeup",tabindex:"-1"},_e=e("a",{class:"header-anchor",href:"#阿里云-codeup","aria-hidden":"true"},"#",-1),ke={href:"https://www.aliyun.com/product/yunxiao/codeup",target:"_blank",rel:"noopener noreferrer"},ve=e("li",null,"基于 Git 的代码管理平台，提供代码托管、代码评审、代码扫描、质量检测、持续集成等功能",-1),fe={href:"https://baike.baidu.com/item/devops/2613029?fromModule=lemma_search-box",target:"_blank",rel:"noopener noreferrer"},ye=e("strong",null,"不提供",-1),Ge=e("h2",{id:"总结",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#总结","aria-hidden":"true"},"#"),n(" 总结")],-1),He=e("p",null,"以上就是我的博客部署之路，虽然不太顺利，但一路下来也学习了不少东西，例如 GitHub Actions，如果你对本篇文章有任何疑问或发现任何错误，欢迎评论区留言或 e-mail 我：asoar@163.com",-1),Pe=e("h2",{id:"参考",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#参考","aria-hidden":"true"},"#"),n(" 参考")],-1),Ae={href:"https://theme-hope.vuejs.press/zh/cookbook/tutorial/deploy.html",target:"_blank",rel:"noopener noreferrer"},xe=e("br",null,null,-1),we={href:"https://docs.github.com/zh/actions/learn-github-actions/understanding-github-actions",target:"_blank",rel:"noopener noreferrer"};function Ee(Ce,Ve){const s=h("ExternalLinkIcon");return p(),d("div",null,[g,m,e("p",null,[n("在尝试使用 "),e("a",_,[n("Hexo"),t(s)]),n("、"),e("a",k,[n("VuePress"),t(s)]),n(" 构建博客后，我最终选定了更为熟悉的 VuePress （Vue 语法）构建我的第一个博客"),v,n(" 在使用 "),e("a",f,[n("VuePress Theme Hope"),t(s)]),n(" 主题完成自定义的博客开发后，我迫不及待地开始部署博客，秉着提高访问速度的原则，我开始寻找部署到除 "),e("a",y,[n("GitHub Pages"),t(s)]),n(" 外的方法，可这一路似乎没有我想象中那么顺利")]),u(" more "),G,H,e("p",null,[n("如果你是通过 "),e("a",P,[n("vuepress-theme-hope"),t(s)]),n(" 主题创建的 VuePress 项目，那么部署博客至 GitHub Pages 将会非常容易：")]),A,e("p",null,[e("a",x,[n("GitHub Pages"),t(s)]),n(" 分为个人页面与项目页面：")]),w,e("p",null,[n("则按个人需求创建 GitHub 仓库后，配置部署站点的基础路径 "),e("a",E,[n("base 选项"),t(s)]),n("：")]),C,e("div",V,[S,e("p",null,[n("如果想深入了解 GitHub Actions，可参考"),e("a",z,[n("这篇文章"),t(s)]),n("或 "),e("a",j,[n("GitHub Actions 官方中文文档"),t(s)])])]),e("p",null,[n("不同的 Actions 可执行不同的任务，因此我们可以使用别人创建好的 Actions（不用造轮子），你可以到 GitHub 的 "),e("a",B,[n("Actions 市场"),t(s)]),n(" 搜索你需要的")]),D,e("p",null,[n("回到部署博客中，你可参考我博客中的"),e("a",N,[n("工作流代码"),t(s)]),n("，每一步我都编写了详细的注释，因此我只列出博客 Actions 的步骤流程：")]),T,e("p",null,[n("这里的部署也十分简单，只要在原先项目的工作流上增加任务步骤即可，也就是说同样需要借助 GitHub Actions，我使用的是 "),e("a",W,[n("yanglbme/gitee-pages-action"),t(s)]),n("，该 Actions 仓库下的 "),e("a",I,[n("README.md"),t(s)]),n(" 已有详细的使用教程，此处不再重复")]),L,e("p",null,[n("（1） 将 GitHub 仓库的代码同步至 Gitee 的仓库，这一步该 Actions 作者使用的是他人的 "),e("a",M,[n("wearerequired/git-mirror-action"),t(s)]),n("（将 GitHub 仓库同步至任何平台）")]),q,e("p",null,[n("另外，在前面寻找加快博客访问速度的方法时，我还了解到可通过 "),e("a",F,[n("CDN（内容分发网络）"),t(s)]),n(" 进行加速，当我兴高采烈地购买了阿里云的 CDN 加速资源包并进行配置时，才发现如果要在国内加速，所加速的域名也"),O,n("，幸好未使用的 CDN 加速资源包可以五天无理由退款")]),R,e("h3",U,[J,n(),e("a",X,[n("Gitee Pages"),t(s)])]),e("ul",null,[Y,e("li",null,[n("暂时"),Z,n("自定义域名， 虽然开通 Gitee Pages Pro 服务即可自定义域名（同样需要备案），但 "),e("a",$,[n("Gitee 帮助中心"),t(s)]),n(" 已表示：暂时关闭个人用户购买入口")])]),e("h3",K,[Q,n(),e("a",ee,[n("Coding"),t(s)])]),e("ul",null,[ne,e("li",null,[n("在我咨询腾讯云官方客服后得知，现在已经"),se,n("静态网页托管，必须通过腾讯云的云开发 Webify 部署新站点，参考 "),e("a",te,[n("Coding 网站托管"),t(s)])])]),e("h3",ae,[oe,n(),e("a",ie,[n("腾讯云 Webify"),t(s)])]),e("ul",null,[e("li",null,[n("专为 Web 开发者打造的 Web 应用托管平台，按照官方文档可快速部署静态网页，可直接从 GitHub、GitLab、Gitee、Coding 四个平台导入仓库以快速部署 Web 应用，通过 Webify 平台创建的 Web 应用会自动部署到同一账号下的 "),e("a",re,[n("腾讯云 Serverless"),t(s)])]),ce,e("li",null,[n("部署 Web 应用"),le,n("开通创建一个对应的"),pe,n("，官网给出的计费参考：每日 PV 1000 的网站，每日产生的费用大约在 0.01~0.1 元左右（具体将根据应用实际使用资源情况而定）。"),e("a",de,[n("官方计费详情"),t(s)]),e("div",ue,[he,e("p",null,[e("a",be,[n("PV（Page Views）"),t(s)]),n(" 指页面浏览量，Page 一般是指普通的 HTML 网页，也包含 php、jsp 等动态产生的 HTML 内容"),ge,n(" 来自浏览器的一次 HTML 内容请求会被看作一个 PV，逐渐累计成为 PV 总数")])])])]),e("h3",me,[_e,n(),e("a",ke,[n("阿里云 Codeup"),t(s)])]),e("ul",null,[ve,e("li",null,[n("在搜集资料时了解到 Codeup 似乎更适合企业应用 "),e("a",fe,[n("DevOps 开发模式"),t(s)]),n("，在咨询阿里云客服后得知，Codeup "),ye,n("静态网页部署服务")])]),Ge,He,Pe,e("p",null,[e("a",Ae,[n("vuepress-theme-hope/部署项目"),t(s)]),xe,e("a",we,[n("GitHub Actions 官方中文文档"),t(s)])])])}const je=l(b,[["render",Ee],["__file","Deployment of my blog.html.vue"]]);export{je as default};
