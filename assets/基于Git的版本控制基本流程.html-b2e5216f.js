import{_ as h,a as g,b as u,c as b}from"./gitee-c5ae7577.js";import{_ as v,V as m,W as _,Z as e,$ as n,X as s,Y as f,a4 as i,a0 as d,B as c}from"./framework-73f3449e.js";const k={},S=e("h1",{id:"基于-git-的版本控制基本流程",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#基于-git-的版本控制基本流程","aria-hidden":"true"},"#"),n(" 基于 Git 的版本控制基本流程")],-1),G=e("h2",{id:"前言",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),n(" 前言")],-1),x=e("strong",null,"版本控制",-1),H={href:"https://git-scm.com/",target:"_blank",rel:"noopener noreferrer"},y=d(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p>版本控制贯穿整个前端项目的开发，基于<strong>分布式版本控制系统</strong>的运行模式，使用 Git 进行版本控制时，可基本分为在<strong>客户端</strong>（本地电脑）以及<strong>服务器</strong>（GitHub 等开源项目托管平台）的不同操作</p><h2 id="一、本地管理项目" tabindex="-1"><a class="header-anchor" href="#一、本地管理项目" aria-hidden="true">#</a> 一、本地管理项目</h2><p>本地管理意味着只在开发者的本地电脑中进行操作，不涉及任何联网操作</p><p>本地管理的<strong>核心思想</strong>就是将当前的前端项目保存至一个本地仓库，可基本分为以下四个步骤</p><h3 id="_1-创建-gitignore-配置文件" tabindex="-1"><a class="header-anchor" href="#_1-创建-gitignore-配置文件" aria-hidden="true">#</a> 1. 创建 .gitignore 配置文件</h3><p>在<strong>项目根目录</strong>下创建 <strong>.gitignore</strong> 配置文件，它用于忽略当前项目中无需使用 Git 进行管理的文件，该文件没有后缀名</p><h4 id="_1-1-编辑-gitignore-文件" tabindex="-1"><a class="header-anchor" href="#_1-1-编辑-gitignore-文件" aria-hidden="true">#</a> 1.1 编辑 .gitignore 文件</h4><p>在 .gitignore 文件中，不仅可忽略单独的某个文件，还可忽略某个文件夹及其目录下的所有文件，参考示例：</p><div class="language-.gitignore line-numbers-mode" data-ext=".gitignore"><pre class="language-.gitignore"><code># .gitignore 文件格式规范：
# 以 # 开头的是注释
# 以 / 结尾的是目录
# 以 / 开头防止递归
# 以 ! 开头表示取反

# 忽略任何目录下名为 node_modules 的文件夹
node_modules/

# 只忽略当前目录（项目根目录）下名为 example 的文件
/exmaple

# 忽略所有文件名（包含后缀名）包含 .abc 的文件
*.abc

# 但不忽略 example.abc 文件，即使上一步忽略了.abc 文件
!example.abc

# 只忽略 abc 目录下的 .txt 文件，诸如 abc/example/a.txt 的不会忽略
abc/*.txt

# 忽略 abc 目录及其所有子目录下的 .txt 文件
abc/**/*.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述示例中，部分使用了 <strong>glob 模式</strong> 进行文件和文件夹的匹配，它是简化了的正则表达式，常用匹配规则：</p><p>（1） <code><strong>*</strong></code> 表示匹配 0 个或多个任何字符<br> （2） <code><strong>[]</strong></code> 表示匹配任何一个列在<strong>方括号</strong>中的字符，例如 <code>[git]</code> 则匹配 <code>g</code> 或 <code>i</code> 或 <code>t</code><br> （3）在方括号中使用<strong>短横线 <code> -</code></strong> 分隔两个字符时，表示匹配这两个字符范围内的所有字符，例如 <code>[0-9]</code> 表示匹配所有 0-9 的数字<br> （4） <code><strong>？</strong></code> 表示只匹配一个任意字符<br> （5） <code><strong>**</strong></code> 表示匹配任意中间目录，例如 <code>a/\\*\\*/z</code> 可匹配 <code>a/z</code>、<code>a/b/z</code>、<code>a/b/c/z</code> 等</p><div class="hint-container tip"><p class="hint-container-title">提示</p><ol><li>被加入到 .gitignore 配置文件的文件，不会出现在未跟踪（untracked）文件列表</li><li>已跟踪的文件无法进行忽略，因此需在初始化本地仓库前创建好 .gitignore 配置文件</li></ol></div><h4 id="_1-2-使用-gitkeep-配置文件" tabindex="-1"><a class="header-anchor" href="#_1-2-使用-gitkeep-配置文件" aria-hidden="true">#</a> 1.2 使用 .gitkeep 配置文件</h4><p>当某个目录下只有<strong>唯一一个</strong>文件或文件夹且<strong>被加入</strong>到忽略文件中，例如目录 <code>abc/efg/xyz</code>，Git 就不会追踪该目录</p><p>而后续开发过程中，若需在目录 <code> abc/efg/</code> 下生成一个新的文件或文件夹，同时需要使用 Git 进行跟踪，此时就可在该目录下创建一个 <strong>.gitkeep</strong> 配置文件，表示让 Git 正常跟踪该目录，<strong>.gitkeep</strong> 配置文件无需编辑任何内容，无文件后缀名</p><h3 id="_2-初始化本地仓库" tabindex="-1"><a class="header-anchor" href="#_2-初始化本地仓库" aria-hidden="true">#</a> 2. 初始化本地仓库</h3><p>打开终端（命令行窗口），确保终端运行目录为<strong>项目根目录</strong>，运行以下终端命令，表示将以当前项目根目录创建一个空的 Git 本地仓库：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,19),C={class:"hint-container warning"},B=e("p",{class:"hint-container-title"},"注意",-1),q={href:"https://git-scm.com/",target:"_blank",rel:"noopener noreferrer"},A=d('<div class="hint-container tip"><p class="hint-container-title">windows 系统终端打开方法</p><ol><li>打开项目根目录，例如桌面上名为 <code>music</code> 的项目文件夹，打开的路径应为： <code>C:\\Users\\Administrator\\Desktop\\music</code></li><li>在上一步打开的窗口中，<strong>单击</strong>菜单中的地址栏，输入 <code>cmd</code> 后按回车即可打开命令行窗口</li></ol><p>PS：<br> 当然你也可以通过 <code>win + R</code> 调出运行窗口，输入 <code>cmd</code> 后按回车调出命令行窗口，但此时终端运行目录在默认的 <code>C:\\Users\\Administrator</code>，因此你需要通过 <code>cd</code> 命令来手动切换到项目根目录</p><p>或者使用 <strong>Git</strong> 软件提供的命令行窗口，只需右键本地的项目根目录，点击鼠标右键菜单栏中的 <code>Git Bash Here</code> 即可</p><p>若你正在使用 <strong>VSCode</strong> 进行开发，可在打开项目后直接通过快捷键 <code>ctrl + `</code> 来使用 <strong>VSCode</strong> 的集成终端</p></div><p>执行命令后，终端会提示 <code>Initialized empty Git repository in &quot;本地项目完整目录&quot;</code> ，同时项目根目录下会自动创建一个名为 <code>.git</code> 的<strong>隐藏文件夹</strong>，它就是当前项目的 Git 本地仓库，里面包含了初始化仓库的必要文件，是 Git 仓库的必要组成部分，<strong>不可删除</strong></p><div class="hint-container tip"><p class="hint-container-title">提示</p><p><strong>git init</strong> 命令只需执行一次，若再次执行终端会提示重复初始化已存在仓库：<code>Reinitialized existing Git repository in &quot;本地项目完整目录&quot;</code></p></div><h3 id="_3-跟踪文件并加入暂存区" tabindex="-1"><a class="header-anchor" href="#_3-跟踪文件并加入暂存区" aria-hidden="true">#</a> 3. 跟踪文件并加入暂存区</h3><p>运行以下终端命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> status\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行命令后的结果一般可称为<strong>状态报告</strong>，在本次状态报告中：<br> （1）当前在 master 主分支（最新版 Git 为 main 主分支）<br> （2）未有任何提交<br> （3）当前未被 Git 跟踪的文件列表（Untracked files）<br> （4）提示当前暂存区未有任何文件可提交</p><figure><img src="'+h+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>由于是刚初始化的仓库，因此所有文件都是<strong>未跟踪</strong>状态（<span style="color:#d42c2a;">文件名为红色</span>），在确认文件无误后即可执行以下终端命令，表示跟踪<strong>所有文件</strong>并加入暂存区</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">命令说明</p><p><code>git add .</code>（英文句号）是开发中常用的命令，它表示一次性将所有新增的和修改过的文件加入暂存区，适用于工作区中需被暂存的文件个数较多的时候<br> 你也可以单独将某个文件加入暂存区，例如 <code>git add index.html</code></p></div><p>执行完命令后终端不会有任何提示信息，此时再次执行终端命令 <code>git status</code>，会发现所有文件都已加入至暂存区（<span style="color:#109100;">文件名为绿色</span>）</p><figure><img src="`+g+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4-提交至本地仓库" tabindex="-1"><a class="header-anchor" href="#_4-提交至本地仓库" aria-hidden="true">#</a> 4. 提交至本地仓库</h3><p>前面完成初始化的本地空仓库 “嗷嗷待哺”，此时就可执行以下终端命令，将暂存区内的所有文件提交至本地仓库进行保存</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;init project&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">命令说明</p><p><code>git commit</code> 命令表示进行提交操作，<code>-m</code> 选项后是本次的提交消息，用于对本次提交的内容进行描述，如初始化项目（init project）</p></div><p>执行命令成功后，终端会报告本次提交中：</p><ul><li><code>数字 file changed</code>：被改动的文件数量（添加或修改的文件数量）</li><li><code>数字 insertions</code>：表示在上述文件内插入新内容的行数</li></ul><p>此时再次执行终端命令 <code>git status</code>，终端会提示当前处于 master 主分支，<code>Nothing to commit, working tree clean</code>，表明工作区中所有的文件都处于<code>“未修改”</code>的状态，即没有对工作区的任何文件进行任何修改，没有任何文件需要被提交</p><div class="hint-container tip"><p class="hint-container-title">查看提交日志</p><p>在进行一次本地提交后，可运行终端命令 <code>git log</code> 来查看所有的本地提交记录</p></div><h2 id="二、托管项目" tabindex="-1"><a class="header-anchor" href="#二、托管项目" aria-hidden="true">#</a> 二、托管项目</h2>`,22),T={href:"https://github.com/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://gitee.com/",target:"_blank",rel:"noopener noreferrer"},z=d(`<h3 id="_1-生成-ssh-key" tabindex="-1"><a class="header-anchor" href="#_1-生成-ssh-key" aria-hidden="true">#</a> 1. 生成 SSH key</h3><p><strong>SSH</strong> 是 <code>Secure Shell Protocol</code> 的首字母缩写，安全外壳协议，是一种网络安全协议，通过对网络数据的<strong>加密</strong>，提供了不安全网络环境下的<strong>安全远程登录</strong>和其他<strong>安全网络服务</strong></p><p>而 SSH key 则是用于<strong>本地仓库</strong>和 GitHub 或 Gitee 之间免登录的<strong>加密数据传输</strong>，它由公钥和私钥组成：<br> （1）公钥，public key，需要配置到 GitHub 或 Gitee 中<br> （2）私钥，private key，存放于客户端的电脑中</p><h4 id="_1-1-检查已生成的密匙对" tabindex="-1"><a class="header-anchor" href="#_1-1-检查已生成的密匙对" aria-hidden="true">#</a> 1.1 检查已生成的密匙对</h4><p><strong>每台设备</strong>只需配置一对 <strong>SSH 公私密匙</strong> 即可，若之前已生成过则<strong>无需重复生成</strong>，可直接复用<br> 因此在生成<strong>新</strong>的 SSH 密匙对之前，可以先<strong>检查</strong>所用设备是否已生成，<strong>否则</strong>在生成新的 SSH 密匙对时会要求重写另一个密钥，即将其保存至其他地方</p><p>在任意位置打开 <code>Git Bash</code>，执行以下终端命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ls</span> <span class="token parameter variable">-al</span> ~/.ssh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>若在本地的默认密匙保存目录下存在密匙文件，此时 <code>Git Bash</code> 会显示列表，否则显示无法获取列表</p><h4 id="_1-2-生成密匙对" tabindex="-1"><a class="header-anchor" href="#_1-2-生成密匙对" aria-hidden="true">#</a> 1.2 生成密匙对</h4><p>在确认自己的设备没有可用的 SSH 密匙后，在任意位置打开 <code>Git Bash</code>，执行以下终端命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ssh-keygen <span class="token parameter variable">-t</span> ed25519 <span class="token parameter variable">-C</span> <span class="token string">&quot;your_email@example.com&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">命令说明</p><ol><li>Ed25519 是一种算法，若当前设备系统不支持该算法，应使用以下命令创建：<br><code>ssh-keygen -t rsa -b 4096 -C&quot;用户邮箱地址&quot;</code>（rsa 算法）</li><li>命令最后的邮箱地址会被加入到生成的 SSH 密匙中，最初是为了便于辨识，原则上只是一个标识符，并不强制使用具体的邮箱（为方便辨识使用 Github 或 Gitee 账户绑定的邮箱）</li></ol></div><p>该命令执行分为<strong>三个步骤</strong>：<br> （1）<code>第一次</code>回车运行命令，终端提示键入将要保存的密匙文件名，可<strong>直接回车</strong>使用默认名字：<code>c/Users/Administrator/.ssh/id_ed25519</code></p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>若之前已生成过 SSH 密匙，再次生成<strong>相同算法</strong>的密匙时，直接回车使用默认密匙名会提示是否覆盖已有的密匙文件：键入 <code>y</code> 即表示覆盖，键入 <code>n</code> 则直接退出生成命令<br> 因此若需要生成<strong>多个</strong> SSH 密匙，必须在当前步骤命名密匙文件</p></div><p>（2）<code>第二次</code>回车选择保存路径后，终端提示键入使用 SSH 密匙的安全密码，可<strong>直接回车</strong>表示不使用</p><p>（3）<code>第三次</code>回车终端提示再次键入上一步的安全密码以确认，由于上一步未使用所以可<strong>直接按回车</strong>，至此生成 SSH 密匙流程结束</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>只能使用 <strong>Git</strong> 提供的 <strong>Git Bash</strong> 命令行终端执行上述命令</p><p>由于是配置当前电脑设备的密匙，因此无需在项目根目录下打开 Git Bash，在任意地方打开都可</p><p>无论是配置到 GitHub 还是 Gitee，SSH 密匙生成的步骤都是<strong>一样的</strong></p></div><h3 id="_2-配置-ssh-key" tabindex="-1"><a class="header-anchor" href="#_2-配置-ssh-key" aria-hidden="true">#</a> 2. 配置 SSH key</h3><h4 id="_2-1-获取公钥" tabindex="-1"><a class="header-anchor" href="#_2-1-获取公钥" aria-hidden="true">#</a> 2.1 获取公钥</h4><p>获取公钥的目的是为了将其配置到 GitHub 或 Gitee 上</p><p>在成功生成 SSH 密钥后，默认密匙保存路径 <code>C:\\Users\\Administrator\\.ssh</code> 下就有 <code>id_ed25519</code> （私钥文件）和 <code>id_ed25519.pub</code> （公钥文件）</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>若是使用 rsa 算法，则生成的两个文件就是 <code>id_rsa</code> 和 <code>id_rsa.pub</code></p></div><p>因此，可通过以下两种方法获取 <code>SSH 公钥</code>：</p><p>（1）在 SSH 密匙默认保存路径 <code>C:\\Users\\Administrator\\.ssh</code> 下，通过<strong>记事本</strong>或 <strong>VSCode</strong> 打开 <code>id_ed25519.pub</code> 公钥文件，复制公钥内容</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Windows 系统<strong>推荐使用 VSCode</strong> 打开秘钥文件，无论是直接拖拉到 VSCode 还是右键 <code>通过 code 打开</code>，都不会被系统设置为默认打开程序</p><p>如果通过<strong>记事本</strong>打开秘钥文件，可能会将记事本设置为该类型文件的<strong>默认打开程序</strong>，如果你希望恢复原样，可尝试以下方法：<br> （1）桌面上新建一个文本文档后，重命名为 <code>.exe</code> 的程序文件，忽视系统 &quot;更改后缀不可用&quot; 的提示<br> （2）右键秘钥文件，<code>打开方式</code> → <code>选择默认程序</code>，接着选择你刚刚创建的 <code>.exe</code> 文件即可，此时秘钥文件会因该 <code>.exe</code> 文件不可用而恢复默认的图标 （3）删除所创建的 <code>.exe</code> 文件即可</p></div><p>（2）打开 <code>Git Bash</code> 终端，执行如下命令来直接查看和复制公钥内容：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> ~/.ssh/id_ed25519.pub
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-2-添加公钥" tabindex="-1"><a class="header-anchor" href="#_2-2-添加公钥" aria-hidden="true">#</a> 2.2 添加公钥</h4><p><strong>GitHub</strong>：</p><ol><li>点击头像下拉菜单中的 <code>Settings</code> → 页面左侧菜单栏 <code>Access</code> 中的 <code>SSH and GPG Keys</code> → 点击 <code>New SSH key</code> 按钮创建新的 SSh key</li><li>在 SSH key 添加页面中：<br> （1）在 <code>Title</code> 文本框中自定义 Key 的名称，来标识这个 key 从何而来<br> （2）将上一步复制的 <strong>SSH 公钥</strong> 粘贴到 <code>Key</code> 文本框后，即可点击 <code>Add SSH key</code>按钮添加 SSH 密匙</li></ol><div class="hint-container info"><p class="hint-container-title">命名 key</p><p>假如你有命名困难症，可参考如下命名规则：<strong>平台名_算法名_key 类型</strong><br> 例如：<code>GITHUB_ED25519_PUBLIC</code>、<code>GITEE_RSA_PUBLIC</code></p></div><ol start="3"><li>此时页面跳转至 GitHub 账号密码输入页面，以确保操作安全性，输入后则成功添加公钥</li></ol><p><strong>Gitee</strong>：</p><ol><li>点击头像下拉菜单中的 <code>设置</code> → 页面左侧菜单栏 <code>安全设置</code> 中的 <code>SSH 公钥</code>，直接进入添加 SSH key 页面</li><li>在 SSH key 添加页面中，将上一步复制的 <strong>SSH 公钥</strong> 直接复制到 <code>公匙</code> 文本框中后，其标题将自动生成（默认为公钥中的邮箱地址）</li><li>点击确定后，再通过登录密码验证后即成功添加公钥</li></ol><h4 id="_2-3-添加主机" tabindex="-1"><a class="header-anchor" href="#_2-3-添加主机" aria-hidden="true">#</a> 2.3 添加主机</h4><p>在 GitHub 或 Gitee 中添加公钥后，<strong>首次使用</strong>该公钥连接 GitHub 或 Gitee 的远程仓库前，需要在本地将 host（主机），GitHub 为 <code>github.com</code>，Gitee 为 <code>gitee.com</code> 添加到本机 <strong>SSH 可信任列表</strong>中并确认进行连接</p><p>打开 Git Bash 终端，执行如下终端命令：</p>`,37),V=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"ssh"),n(),e("span",{class:"token parameter variable"},"-T"),n(` git@github.com
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),U=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"ssh"),n(),e("span",{class:"token parameter variable"},"-T"),n(` git@gitee.com
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),E=d('<p>回车执行命令后，终端提示是否继续建立与 GitHub/Gitee 的连接，输入 <code>yes</code> 后若显示以 <code>You&#39;ve successfully</code> 开头的相关信息则表示 SSH 公钥配置成功，此时即可通过 <strong>SSH 协议</strong>将本地仓库的项目代码推送到 GitHub 或 Gitee 的远程仓库上</p><p>添加 host 成功后，在存放公钥的 <code>.ssh/</code> 目录下，文件 <code>known_hosts</code> 就会记录已被本地识别的<strong>主机信息</strong>及对应的公钥</p><div class="hint-container tip"><p class="hint-container-title">提示</p><ol><li>配置 SSH 公钥来访问远程仓库是开发<strong>推荐</strong>的方式，当然你也可以不配置，使用 <strong>HTTPS</strong> 协议的方式访问 GitHub 或 Gitee 的远程仓库，只不过每次上传或拉取代码都需要输入账号及密码以进行安全验证</li><li>由于配置 SSH 公钥是在<strong>本地设备</strong>与<strong>服务器</strong>之间进行操作，因此可直接使用本地的 <strong>Git Bash</strong> 终端执行相关命令，而在本地仓库管理项目的 <strong>Git Bash</strong> 则必须在项目根目录下</li></ol></div><h3 id="_3-创建远程仓库" tabindex="-1"><a class="header-anchor" href="#_3-创建远程仓库" aria-hidden="true">#</a> 3. 创建远程仓库</h3>',4),I={href:"https://github.com/",target:"_blank",rel:"noopener noreferrer"},N={href:"https://gitee.com/",target:"_blank",rel:"noopener noreferrer"},P=e("code",null,"仓库设置",-1),L=e("h3",{id:"_4-上传项目",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_4-上传项目","aria-hidden":"true"},"#"),n(" 4. 上传项目")],-1),K=e("h4",{id:"_4-1-切换至-ssh-协议",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_4-1-切换至-ssh-协议","aria-hidden":"true"},"#"),n(" 4.1 切换至 SSH 协议")],-1),R=e("p",null,[n("把本地项目上传到 GitHub 或 Gitee 所创建的空白仓库前，需先在空白仓库的"),e("strong",null,"代码选项卡"),n("中，将远程仓库的访问形式由 "),e("code",null,"HTTPS 协议"),n("切换到 "),e("code",null,"SSH 协议")],-1),j=e("figure",null,[e("img",{src:u,alt:"",tabindex:"0",loading:"lazy"}),e("figcaption")],-1),D=e("figure",null,[e("img",{src:b,alt:"",tabindex:"0",loading:"lazy"}),e("figcaption")],-1),W=e("h4",{id:"_4-2-关联远程仓库",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_4-2-关联远程仓库","aria-hidden":"true"},"#"),n(" 4.2 关联远程仓库")],-1),Y=e("p",null,[n("打开终端（命令行窗口），确保终端运行目录为"),e("strong",null,"项目根目录"),n("，运行以下终端命令：")],-1),X=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"git"),n(" remote "),e("span",{class:"token function"},"add"),n(` origin git@github.com:github用户名/test.git
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),Z=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"git"),n(" remote "),e("span",{class:"token function"},"add"),n(` origin git@gitee.com:gitee用户名/test.git
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),$=d(`<div class="hint-container info"><p class="hint-container-title">命令说明</p><p>该命令表示在项目中添加名为 <strong>origin</strong> 的远程仓库，<strong>origin</strong> 命令后面就是<strong>远程仓库地址</strong>，可直接复制 4.1 步骤中切换至 SSH 协议后的<code>地址栏</code>，该命令旨在让本地仓库与码云仓库进行关联</p></div><p>在键入该命令中的远程仓库名时，若<strong>输入有误</strong>且已回车执行，将直接添加错误的远程来源，此时需要<strong>先删除</strong>已添加的远程仓库，才能再次添加正确的远程仓库：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看当前本地仓库已关联的 origin 远程仓库，确认是否键入错误</span>
<span class="token function">git</span> remote <span class="token parameter variable">-v</span>

<span class="token comment"># 删除关联的 origin 远程仓库</span>
<span class="token function">git</span> remote <span class="token function">rm</span> origin

<span class="token comment"># 此时就可重新关联 origin 远程仓库</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-3-上传项目" tabindex="-1"><a class="header-anchor" href="#_4-3-上传项目" aria-hidden="true">#</a> 4.3 上传项目</h4><p>打开终端（命令行窗口），确保终端运行目录为<strong>项目根目录</strong>，运行以下终端命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">命令说明</p><p>该命令表示将本地仓库主分支 master 的项目文件上传到远程仓库，刷新 GitHub 或 Gitee 仓库页面，即可看到上传的项目文件</p></div><h2 id="三、开发分支" tabindex="-1"><a class="header-anchor" href="#三、开发分支" aria-hidden="true">#</a> 三、开发分支</h2><p>完成上述基本的版本控制流程后，在后续每个单独的页面或功能开发中，都是需要先创建一个<strong>本地子分支</strong>，在该分支下进行开发工作。当开发完毕后，该本地子分支会被<strong>提交、合并、删除</strong></p><p>下面将以开发搜索功能为例</p><h3 id="_1-创建分支" tabindex="-1"><a class="header-anchor" href="#_1-创建分支" aria-hidden="true">#</a> 1. 创建分支</h3><p>打开终端（命令行窗口），确保终端运行目录为<strong>项目根目录</strong>，运行以下终端命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> search
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">命令说明</p><ol><li>该命令表示基于 master 主分支，在本地创建子分支 search，<strong>同时切换</strong>到子分支 search，用于开发搜索功能</li><li><code>git branch search</code> 命令同样可创建 search 分支，只不过不会切换到该分支</li><li><code>git branch</code> 可查看当前所有分支，会看到当前处于子分支 search(*)</li></ol></div><h3 id="_2-提交分支" tabindex="-1"><a class="header-anchor" href="#_2-提交分支" aria-hidden="true">#</a> 2. 提交分支</h3><p>当完成搜索功能的开发后，即可将本地的 search 分支进行本地的提交<br> 打开终端（命令行窗口），确保终端运行目录为<strong>项目根目录</strong>，运行以下终端命令：</p><p><strong>本地提交</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 确认当前文件状态，文件状态一般都是未跟踪或已修改</span>
<span class="token function">git</span> status
<span class="token comment"># 提交当前的更新，即添加至暂存区</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span class="token comment"># 确认待提交的新增加的项目文件</span>
<span class="token function">git</span> status
<span class="token comment"># 提交至本地仓库</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;完成搜索功能开发&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>上传分支</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 将本地的 search 分支上传到远程仓库进行保存</span>
<span class="token function">git</span> push <span class="token parameter variable">-u</span> origin search
<span class="token comment"># 命令中的 search 表示在远程仓库也创建名为 search 的分支</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-合并分支" tabindex="-1"><a class="header-anchor" href="#_3-合并分支" aria-hidden="true">#</a> 3. 合并分支</h3><p>上传 search 分支到远程仓库后，可随时拉取该分支的代码，因此可将本地的 search 分支代码合并到本地的 master 分支，然后删除 search 分支</p><p><strong>合并子分支</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看当前所处分支（子分支 search）</span>
<span class="token function">git</span> branch
<span class="token comment"># 切换到 master 主分支</span>
<span class="token function">git</span> checkout master
<span class="token comment"># 将子分支 search 的代码合并到主分支</span>
<span class="token function">git</span> merge search
<span class="token comment"># 将合并后的主分支上传到远程仓库进行更新</span>
<span class="token function">git</span> push
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>删除子分支</strong></p><p>本地仓库中已将 search 分支代码合并至主分支，合并之前的代码也已上传至远程仓库，随时可查看</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 确认当前处于主分支 master，否则无法删除子分支</span>
<span class="token function">git</span> branch
<span class="token comment"># 删除本地分支 search</span>
<span class="token function">git</span> branch <span class="token parameter variable">-d</span> search
<span class="token comment"># 确认当前已无本地分支 search</span>
<span class="token function">git</span> branch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,28),F={href:"https://mrhope.site/software/git/",target:"_blank",rel:"noopener noreferrer"},J=e("br",null,null,-1),M={href:"https://git-scm.com/docs",target:"_blank",rel:"noopener noreferrer"};function O(Q,ee){const a=c("ExternalLinkIcon"),l=c("CodeTabs"),p=c("Tabs");return m(),_("div",null,[S,G,e("p",null,[n("本文介绍基于 Git 进行基本的版本控制，阅读本文前请确保已对"),x,n("和 "),e("a",H,[n("Git 软件"),s(a)]),n("有一定的了解")]),f(" more "),y,e("div",C,[B,e("p",null,[n("必须安装 "),e("a",q,[n("Git 软件"),s(a)]),n("才能运行 git 命令")])]),A,e("p",null,[n("在本地管理项目后，即可将项目托管至 "),e("a",T,[n("GitHub"),s(a)]),n(" 或 "),e("a",w,[n("Gitee"),s(a)]),n("，两者上传步骤基本一致")]),z,s(l,{id:"341",data:[{title:"GitHub"},{title:"Gitee"}],"tab-id":"shell"},{tab0:i(({title:t,value:o,isActive:r})=>[V]),tab1:i(({title:t,value:o,isActive:r})=>[U]),_:1}),E,e("p",null,[n("登录 "),e("a",I,[n("GitHub"),s(a)]),n(" 或 "),e("a",N,[n("Gitee"),s(a)]),n("，创建新的仓库，该步骤比较简单，需要注意的是 Gitee 中无法在创建仓库时选择开源，只能在创建仓库后通过 "),P,n(" 修改为公开")]),L,K,R,s(p,{id:"384",data:[{title:"GitHub"},{title:"Gitee"}]},{tab0:i(({title:t,value:o,isActive:r})=>[j]),tab1:i(({title:t,value:o,isActive:r})=>[D]),_:1}),W,Y,s(l,{id:"402",data:[{title:"GitHub"},{title:"Gitee"}],"tab-id":"shell"},{tab0:i(({title:t,value:o,isActive:r})=>[X]),tab1:i(({title:t,value:o,isActive:r})=>[Z]),_:1}),$,e("p",null,[e("a",F,[n("Git 软件教程"),s(a)]),n("（由 vuepress-theme-hope 主题作者编写）"),J,e("a",M,[n("Git 官网指南"),s(a)])])])}const ae=v(k,[["render",O],["__file","基于Git的版本控制基本流程.html.vue"]]);export{ae as default};
