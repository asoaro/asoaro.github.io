import{_ as s}from"./ES5.1原型链-bfa6c1c9.js";import{_ as a,V as t,W as o,a0 as e,$ as n}from"./framework-df2899ef.js";const p={},c=n('<h1 id="基于原型链的对象继承" tabindex="-1"><a class="header-anchor" href="#基于原型链的对象继承" aria-hidden="true">#</a> 基于原型链的对象继承</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>A 对象通过继承 B 对象，就能直接拥有 B 对象的所有属性和方法，这是<strong>面向对象编程</strong>很重要的一个方面，也对<strong>代码复用</strong>非常有用</p><p>大部分面向对象的编程语言，都是通过 <strong>“类”</strong>（class）实现对象的继承，而 <strong>JavaScript</strong> 则是通过<strong>原型对象</strong>（prototype）实现对象的继承，因此本文将介绍<i>原型链的继承机制</i>以及<i>构造函数的继承方法</i></p>',4),i=n(`<h2 id="原型链" tabindex="-1"><a class="header-anchor" href="#原型链" aria-hidden="true">#</a> 原型链</h2><p>原型链是建立在构造函数的原型对象上的，即 <code>prototype</code> 属性，同时依赖于所有对象都拥有的 <code>__proto__</code> 属性以及原型对象上的 <code>constructor</code> 属性</p><h3 id="一、构造函数的缺点" tabindex="-1"><a class="header-anchor" href="#一、构造函数的缺点" aria-hidden="true">#</a> <i>一、构造函数的缺点</i></h3><p>在了解原型对象前，我们必须知道为什么需要原型对象</p><p>在 ES5.1 中，由构造函数创建的实例对象，其自身的属性或方法的来源有两个：</p><div class="hint-container info"><p class="hint-container-title">Info</p><ul><li>继承自构造函数：<br> 所有通过该构造函数创建的实例对象<strong>都拥有</strong>的属性和方法（<strong>公共属性/方法</strong>）</li><li>自定义赋值： 个别实例对象通过自定义赋值定义<strong>自身特有</strong>的属性和方法（<strong>私有属性/方法</strong>）</li></ul></div><p>通过这两个来源我们可以发现，实例对象的 <i>属性/方法</i> 要么只能全盘接收来自构造函数的，要么只能自己定义</p><p>那当有一个 <i>属性/方法</i> 只需要在某几个实例对象中使用时，通过构造函数继承会使其他实例对象添加不必要的 <i>属性/方法</i>，而每个实例对象都进行自定义赋值显然不明智，因此我们可得出构造函数的缺点：</p><div class="hint-container info"><p class="hint-container-title">Info</p><ol><li>继承自构造函数的属性和方法全部<strong>直接定义</strong>在实例对象的<strong>内部</strong>，无论该实例对象是否需要</li><li>即便各实例对象继承的 <i>属性/方法</i> 完全一样，但它们使用全等符号 <code>===</code> 却不相等，因为它们各自引向的<strong>内存地址</strong>不一样</li></ol></div><p>上述缺点最直观的表现就是会<strong>造成系统内存资源的浪费</strong>，同时我们可推论出，实例对象所调用的继承自构造函数的属性和方法，没必要都定义在实例对象内部，只要能调用就可以</p><p>因此，针对构造函数的缺点的一个<strong>解决思路</strong>就是，将公共的属性或方法提取出来，放到一个对象中，让所有实例对象都可自主调用，从而实现<strong>共享属性或方法</strong>，节省系统资源，而这个对象，就是构造函数的 <code>prototype</code> 属性</p><div class="hint-container tip"><p class="hint-container-title">ES2015 引入 class 关键字</p><p>ES5.1 生成实例对象的传统方法是使用构造函数，而在其他面向对象语言中则是使用 <strong>&quot;类&quot;</strong> 作为对象模板，但 ES5.1 并没有&quot;类&quot;的概念，且构造函数的写法与传统的面向对象语言（如 C++，Java）差异很大</p><p>因此 ES2015 提供了更接近传统语言的写法，引入了关键字 <code>class</code> 作为对象的模板：</p><ol><li>类是 “特殊的函数”（<code>typeof</code> 返回 <code>function</code>），也可简单认为类就是构造函数的另外一种写法</li><li>基本上，ES2015 的 <code>class</code> 可以看作只是一个<strong>语法糖</strong>，它的绝大部分功能，ES5 都可以做到，新的 <code>class</code> 写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已</li><li>ES2015 中的类<strong>也是基于原型继承</strong>的，但由 ES2015 定义的类的某些语法语义，未与 ES5 类相关的语义共享</li></ol></div><h3 id="二、原型对象-prototype-属性" tabindex="-1"><a class="header-anchor" href="#二、原型对象-prototype-属性" aria-hidden="true">#</a> <i>二、原型对象（prototype 属性）</i></h3><p>JavaScript 继承机制的设计思想，是使原型对象的所有属性和方法，都能被实例对象<strong>共享</strong>，即如果属性和方法定义在原型对象上，那么所有实例对象就能共享，这样不仅节省了内存，还体现了实例对象之间的联系</p><p>因此 JavaScript 规定，每个对象的构造函数都有一个 <code>prototype</code> 属性，指向一个对象，即原型对象</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><ol><li>函数本身也是一种对象，普通函数的 <code>prototype</code> 属性很少用到<br> 但构造函数在生成实例时，其 <code>prototype</code> 属性会<strong>自动</strong>成为实例对象的原型对象，换言之，<code>prototype</code> 属性<strong>必须</strong>要有实例对象生成才是指向原型对象</li><li>原型对象的属性并不是实例对象自身的属性，即实例对象可调用且不需要拥有</li><li>只要修改原型对象，变动就立刻会体现在所有实例对象上</li><li><code>prototype</code> 属性就是用于定义所有实例对象<strong>共享</strong>的属性和方法，这也是它被称为原型对象的原因，而实例对象可以视作从原型对象衍生出来的子对象</li></ol></div><h3 id="三、-proto-属性" tabindex="-1"><a class="header-anchor" href="#三、-proto-属性" aria-hidden="true">#</a> <i>三、__proto__ 属性</i></h3><p>在 JavaScript 中，每个对象都有一个 <code>__proto__</code> 属性，指向其构造函数的 <code>prototype</code> 属性<br> 也就是说，对象的 <code>__proto__</code> 属性 与其构造函数的 <code>prototype</code> 属性是等价的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
obj<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>__proto__</code> 属性为调用对象<i>属性/方法</i>时的<strong>查找机制</strong>提供一个方向，它也是原型链建立的基础</p><div class="hint-container warning"><p class="hint-container-title">非标准属性</p><p><code>__proto__</code> 是一个非标准属性，实际开发中不能使用，只用于内部指向原型对象 <code>prototype</code>，若需获取对象原型应使用 <code>Object.getPrototypeOf()</code></p></div><h3 id="四、constructor-属性" tabindex="-1"><a class="header-anchor" href="#四、constructor-属性" aria-hidden="true">#</a> <i>四、constructor 属性</i></h3><p>该属性定义在 <code>prototype</code> 属性上，默认指向 <code>prototype</code> 对象所在的构造函数，这意味着 <code>constructor</code> 属性可以被所有实例对象继承，继而通过该属性得知某个实例对象由哪一个构造函数产生的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span>
<span class="token punctuation">}</span>
<span class="token class-name">Father</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Father <span class="token comment">// true</span>
<span class="token keyword">let</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

son<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Father <span class="token comment">// true</span>
<span class="token comment">// 注意：因为实例对象son本身没有constructor属性，是继承自构造函数的prototype属性</span>
<span class="token comment">// 所以实际是读取 Father.prototype.constructor</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>对象的属性<code>__proto__</code> 也有 <code>constructor</code> 属性，但因其为非标准属性，此处不讨论</p></div><h4 id="与原型对象同步修改" tabindex="-1"><a class="header-anchor" href="#与原型对象同步修改" aria-hidden="true">#</a> 与原型对象同步修改</h4><p><code>constructor</code> 属性表示<strong>原型对象</strong>与<strong>构造函数</strong>之间的关联关系</p><p>如果原型对象，即构造函数的 <code>prototype</code> 属性被赋值修改，那么 <code>constructor</code> 属性将不再指向原来的构造函数，而是修改后的对象的构造函数</p><p>因此，修改原型对象时，一般要<strong>同步修改</strong> <code>constructor</code> 属性的指向</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 修改原型对象的两种方法：</span>
<span class="token keyword">function</span> <span class="token function">Constr</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
<span class="token punctuation">}</span>
<span class="token comment">// 方法一：若以整个对象赋值，需重新定义constructor属性的指向</span>
<span class="token class-name">Constr</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">constructor</span><span class="token operator">:</span> Constr<span class="token punctuation">,</span>
  <span class="token function-variable function">method1</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 或者赋值后单独重新定义constructor属性的指向：</span>
<span class="token class-name">Constr</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> 新原型对象

<span class="token comment">// 方法二：不直接赋值更改原型对象，而是添加原型对象的方法（推荐）</span>
<span class="token class-name">Constr</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">method1</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">//  利用方法二可扩展内置对象的功能，比如给数组添加求和的方法</span>
<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    sum <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> sum
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>在复杂的对象继承场景中，如果不清楚修改原型对象后的构造函数是哪个，可使用 <code>constructor</code> 属性的 <code>name</code> 属性获取修改后的构造函数名称</p></div><h3 id="五、原型链" tabindex="-1"><a class="header-anchor" href="#五、原型链" aria-hidden="true">#</a> <i>五、原型链</i></h3><p><code>prototype</code>、<code>__proto__</code>、<code>constructor</code> 属性就是原型链的<strong>三大元素</strong></p><p>在 JavaScript 中，每个对象都拥有一个<strong>原型对象</strong>作为模板，从中继承属性和方法<br> 而原型对象也可能拥有它自身的原型，并从中继承方法和属性，这样一层一层、以此类推，这种关系常就称为<strong>原型链</strong>（prototype chain）</p><p>原型链是建立在对象的构造函数的 <code>prototype</code> 属性上，而并非实例对象本身，它解释了为何一个对象可调用定义在其他对象中的属性和方法（继承机制）</p><h4 id="原型链顶端" tabindex="-1"><a class="header-anchor" href="#原型链顶端" aria-hidden="true">#</a> <i>原型链顶端</i></h4><p>所有对象的原型最终都可上溯到 <code>Object.prototype</code>，即 <code>Object</code> 构造函数的 <code>prototype</code> 属性</p><p>也就是说，所有对象都继承了 <code>Object.prototype</code> 的属性，这就是所有对象都有 <code>valueOf()</code> 和 <code>toString()</code> 方法的原因</p><p><code>Object.prototype</code> 的原型是 <code>null</code>：<code>null</code> 没有任何属性和方法，也没有自己的原型，因此，<strong>原型链的尽头就是 <code>null</code></strong></p><h4 id="实例对象的属性-方法调用优先级" tabindex="-1"><a class="header-anchor" href="#实例对象的属性-方法调用优先级" aria-hidden="true">#</a> <i>实例对象的<code>属性/方法</code>调用优先级</i></h4><ul><li><p>实例对象调用<strong>自身没有</strong>的某个属性或方法：</p><ul><li>JavaScript 引擎会到原型对象去寻找该属性或方法，如果找不到就到原型的原型，直到<strong>最顶层</strong>的 <code>Object.prototype</code> 还是找不到，就返回 <code>undefined</code></li></ul></li><li><p>实例对象调用<strong>自身拥有</strong>的某个属性或方法：</p><ul><li>如果原型链中有同名的，则优先读取对象自身的属性或方法，称为 “覆盖”（overriding）</li><li>如果原型链中没有同名的，直接读取对象自身的属性或方法</li></ul></li></ul><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>所寻找的属性在越上层的原型对象，对性能的影响越大，如果寻找某个不存在的属性，将会遍历整个原型链</p></div><h3 id="六、原型链图解" tabindex="-1"><a class="header-anchor" href="#六、原型链图解" aria-hidden="true">#</a> <i>六、原型链图解</i></h3><figure><img src="`+s+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="构造函数的继承" tabindex="-1"><a class="header-anchor" href="#构造函数的继承" aria-hidden="true">#</a> 构造函数的继承</h2><p>让一个构造函数继承另一个构造函数的需求很常见（本质也是实现对象的继承）</p><div class="hint-container warning"><p class="hint-container-title">ES5.1 继承限制</p><p>在 ES 5.1 中，<strong>原生构造函数</strong>是无法继承的，即不能以<strong>内置对象</strong>作为父构造函数<br> 比如，不能自己定义一个 <strong>Array</strong> 的子构造函数，即便没报错，继承后的子构造函数的实例根本不能调用原生构造函数的属性或方法，因为根本没继承到</p></div><div class="hint-container tip"><p class="hint-container-title">ES2015 类继承</p><p>ES2015 的 <code>class</code> 继承使用的是 <code>extends</code> 关键字，用于继承另一个类</p></div><h3 id="一、整体继承" tabindex="-1"><a class="header-anchor" href="#一、整体继承" aria-hidden="true">#</a> <i>一、整体继承</i></h3><p>整体继承表示子构造函数<strong>同时继承</strong>：</p><ul><li>父构造函数自身的属性和方法</li><li>父构造函数的原型对象</li></ul><p>因此继承步骤也大致分为两步：</p><div class="hint-container info"><p class="hint-container-title">Info</p><p><strong>步骤一</strong>：继承父构造函数自身的属性和方法</p><ol><li>在子构造函数中<strong>调用父类构造函数</strong>，继承父类的实例属性/方法</li><li>通过 <code>call</code> 方法指定父构造函数中的 <code>this</code> 的运行环境为当前子构造函数的实例</li></ol></div><div class="hint-container info"><p class="hint-container-title">Info</p><p><strong>步骤二</strong>：继承父构造函数的原型对象</p><p>方法 1：以父构造函数原型对象作为原型，创造新的子构造函数原型并赋值给子构造函数的原型对象<br><code>Son.prototype = Object.create(Father.prototype)</code></p><p>方法 2：通过 <code>new</code> 创建新的父类构造函数实例并将其赋值给子构造函数的原型对象 <br><code>Son.prototype = new Father()</code></p><div class="hint-container tip"><p class="hint-container-title">Tips</p><ol><li><p>子构造函数的原型改变了，上述两种方法都<strong>必须</strong>将子构造函数的 <code>constructor</code> 属性指向原来的构造函数：<br><code>Son.prototype.constructor = Son</code></p></li><li><p>如果直接将<code>父构造函数的原型对象</code>赋值给<code>子构造函数的原型对象</code>，后续<code>子构造函数原型对象</code>新增属性/方法或操作其 <code>constructor</code> 属性，会同步改变父构造函数的原型对象</p></li></ol></div></div><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">2</span>
<span class="token punctuation">}</span>
<span class="token comment">// 继承父构造函数自身属性/方法</span>
<span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 参数中的this指向子构造函数的实例对象</span>
  <span class="token function">Father</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 继承父构造函数的原型对象</span>
<span class="token class-name">Son</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Father</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>
<span class="token class-name">Son</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Son

<span class="token comment">// instanceof会对父类和子类的构造函数都返回true</span>
<span class="token keyword">let</span> h1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
h1 <span class="token keyword">instanceof</span> <span class="token class-name">Father</span> <span class="token comment">// true</span>
h1 <span class="token keyword">instanceof</span> <span class="token class-name">Son</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二、单独继承某个属性-方法" tabindex="-1"><a class="header-anchor" href="#二、单独继承某个属性-方法" aria-hidden="true">#</a> <i>二、单独继承某个属性/方法</i></h3><p>只需在调用父构造函数自身或其原型对象上的属性/方法时，通过 <code>call</code> 或 <code>apply</code> 方法改变 <code>this</code> 指向即可</p><h4 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1" aria-hidden="true">#</a> 示例</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Son</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">Getsum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Father</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">Getsum</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token comment">// 子类其他代码</span>
<span class="token punctuation">}</span>
<span class="token comment">// 子类继承了父类的Getsum方法后，还可以部署自己的代码</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="多重继承" tabindex="-1"><a class="header-anchor" href="#多重继承" aria-hidden="true">#</a> 多重继承</h2><p>JavaScript 中一个对象<strong>无法直接继承</strong>多个对象，但通过一些方法可实现，与构造函数的继承类似，下面以继承两个对象为例</p><div class="hint-container info"><p class="hint-container-title">Info</p><p>步骤一：<br> 在子构造函数中<strong>同时调用</strong>需继承的两个父构造函数，同时通过 <code>call</code> 方法修改 <code>this</code> 指向，继承父构造函数自身的属性/方法</p></div><div class="hint-container info"><p class="hint-container-title">Info</p><p>步骤二：<br> 先继承 <code>父构造函数1</code> 的原型对象，再通过 <code>Object.assign()</code> 方法复制 <code>父构造函数2</code> 的原型对象到子构造函数的原型对象中</p><div class="hint-container tip"><p class="hint-container-title">同步修改 constructor 属性</p><p>子构造函数的原型改变了，<code>constructor</code> 属性也要指回子构造函数自己</p></div></div><h4 id="示例-2" tabindex="-1"><a class="header-anchor" href="#示例-2" aria-hidden="true">#</a> 示例</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token constant">M1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>hello <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token constant">M2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>world <span class="token operator">=</span> <span class="token string">&#39;world&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token constant">S</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token constant">M1</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token constant">M2</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 继承 M1 原型对象</span>
<span class="token class-name">S</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">M1</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>
<span class="token comment">// 继承链上加入 M2</span>
Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token class-name">S</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token class-name">M2</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>
<span class="token comment">// 同步修改子构造函数的constructor</span>
<span class="token class-name">S</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> <span class="token constant">S</span>

<span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">S</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
s<span class="token punctuation">.</span>hello <span class="token comment">// &#39;hello&#39;</span>
s<span class="token punctuation">.</span>world <span class="token comment">// &#39;world&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>子类 <code>S</code> 同时继承了父类 <code>M1</code> 和 <code>M2</code>，这种模式又称为 Mixin（混入）</p>`,67);function l(r,d){return t(),o("div",null,[c,e(" more "),i])}const v=a(p,[["render",l],["__file","基于原型链的对象继承.html.vue"]]);export{v as default};
