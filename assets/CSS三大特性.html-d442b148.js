import{_ as a,V as s,W as o,a0 as d,Y as t,Z as e,X as r,$ as i,B as l}from"./framework-df2899ef.js";const h={},c=t("h1",{id:"css-三大特性",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#css-三大特性","aria-hidden":"true"},"#"),e(" CSS 三大特性")],-1),p=t("h2",{id:"前言",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),e(" 前言")],-1),S=t("p",null,"CSS 即层叠样式表，从字面理解就是设置的 CSS 规则可以被层叠掉，引申出当 CSS 规则发生冲突或与期望样式不符时，CSS 内部是使用何种机制去解决的，这种处理机制，与 CSS 的三大特性紧密联系",-1),g=i('<h2 id="一、层叠性-cascade" tabindex="-1"><a class="header-anchor" href="#一、层叠性-cascade" aria-hidden="true">#</a> 一、层叠性（Cascade）</h2><h3 id="样式冲突的情形" tabindex="-1"><a class="header-anchor" href="#样式冲突的情形" aria-hidden="true">#</a> <strong>样式冲突的情形</strong></h3><ol><li>两者为<strong>完全相同</strong>的选择器</li><li>两者为<strong>权重相同</strong>的选择器</li></ol><h3 id="基于层叠性的处理" tabindex="-1"><a class="header-anchor" href="#基于层叠性的处理" aria-hidden="true">#</a> <strong>基于层叠性的处理</strong></h3><p>根据从上往下的执行顺序，上述两种情形都会执行写在后面的 CSS 规则，即前面的样式被后面的层叠<strong>覆盖</strong>掉，如果以内部样式表为准，则可理解为执行离 HTML 结构近的，即<strong>就近原则</strong></p><h2 id="二、继承性-inheritance" tabindex="-1"><a class="header-anchor" href="#二、继承性-inheritance" aria-hidden="true">#</a> 二、继承性（Inheritance）</h2><h3 id="简述" tabindex="-1"><a class="header-anchor" href="#简述" aria-hidden="true">#</a> <strong>简述</strong></h3><p>在 CSS 中，每个 CSS 属性定义的概述都指出了这个属性是默认继承的 (&quot;Inherited: Yes&quot;) 还是默认不继承的 (&quot;Inherited: no&quot;)，这决定了在没有为元素的属性指定值时该如何计算值</p>',8),_={class:"hint-container tip"},u=t("p",{class:"hint-container-title"},"CSS 参考",-1),b={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference#%E7%B4%A2%E5%BC%95",target:"_blank",rel:"noopener noreferrer"},C=t("strong",null,"字母索引",-1),f={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/color#%E5%BD%A2%E5%BC%8F%E5%AE%9A%E4%B9%89",target:"_blank",rel:"noopener noreferrer"},v=i('<p>因此，子元素会继承父元素的某些样式（规则），如与文本相关的，text-, font-, line-, color，继承性的目的，即是为了简化代码</p><h3 id="控制继承" tabindex="-1"><a class="header-anchor" href="#控制继承" aria-hidden="true">#</a> <strong>控制继承</strong></h3><p>CSS 为控制继承提供了四个特殊的<strong>通用属性值</strong>，每一个 CSS 属性都接收这些值</p><div class="hint-container warning"><p class="hint-container-title">Note</p><p>属性值 revert 属于 CSS4，只有很少浏览器支持，固此处不列举该属性值</p></div><h4 id="_1-css-属性-inherit" tabindex="-1"><a class="header-anchor" href="#_1-css-属性-inherit" aria-hidden="true">#</a> 1. CSS 属性: inherit</h4><p>表示继承父元素中对应 CSS 属性的值</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><ol><li>对于继承属性，inherit 关键字只是增强了属性的默认行为，通常只在覆盖原有的值的时候使用</li><li>继承始终来自 DOM 树中的父元素，即使父元素不是包含块</li><li>inherit 可应用于任何 CSS 属性</li></ol></div><h4 id="_2-css-属性-initial" tabindex="-1"><a class="header-anchor" href="#_2-css-属性-initial" aria-hidden="true">#</a> 2. CSS 属性: initial</h4><p>表示设置此属性为它的初始（或默认）值</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><ol><li>IE 浏览器不支持此关键字</li><li>不应将初始值与浏览器样式表指定的值混淆</li><li>initial 可应用于任何 CSS 属性</li></ol></div><h4 id="_3-css-属性-unset" tabindex="-1"><a class="header-anchor" href="#_3-css-属性-unset" aria-hidden="true">#</a> 3. CSS 属性: unset</h4><p>表示将属性重置为自然值，即属性若具有继承性且父元素有定义值，则与 inherit 类似，否则和 initial 一样</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><ol><li>IE 浏览器不支持此关键字</li><li>initial 可应用于任何 CSS 属性</li></ol></div><h3 id="重设所有属性值" tabindex="-1"><a class="header-anchor" href="#重设所有属性值" aria-hidden="true">#</a> <strong>重设所有属性值</strong></h3><p>CSS 属性 all 将除了 unicode-bidi 与 direction 之外的所有属性重设至其初始值，或继承值</p><p>CSS 属性 all 的合法取值有： inherit / initial / unset / revert</p>',16),m={class:"hint-container tip"},x=t("p",{class:"hint-container-title"},"unicode-bidi 与 direction",-1),k={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/unicode-bidi",target:"_blank",rel:"noopener noreferrer"},y=i(`<h3 id="继承性的应用" tabindex="-1"><a class="header-anchor" href="#继承性的应用" aria-hidden="true">#</a> <strong>继承性的应用</strong></h3><p>此处以行高的继承举例，当为 body 设置了如下样式后：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">body</span> <span class="token punctuation">{</span>
  <span class="token property">font</span><span class="token punctuation">:</span> 12px/1.5 <span class="token string">&#39;microsoft yehei&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若子元素未设定行高，则会继承父元素的行高：1.5 * 子元素 font-size = 子元素行高，这样的优势是子元素可根据自身文字大小自动调整行高</p><h2 id="三、优先级-specificity" tabindex="-1"><a class="header-anchor" href="#三、优先级-specificity" aria-hidden="true">#</a> 三、优先级（Specificity）</h2><h3 id="简述-1" tabindex="-1"><a class="header-anchor" href="#简述-1" aria-hidden="true">#</a> <strong>简述</strong></h3><p>浏览器会根据优先级来决定当<strong>多个规则</strong>有<strong>不同选择器</strong>对应<strong>相同</strong>的元素时，需要使用哪个规则</p><h3 id="同一元素被多个选择器选中时" tabindex="-1"><a class="header-anchor" href="#同一元素被多个选择器选中时" aria-hidden="true">#</a> <strong>同一元素被多个选择器选中时</strong></h3><p>1.若选择器完全相同，则执行层叠性</p><p>2.若选择器不同，则按选择器的权重执行</p><table><thead><tr><th>选择器</th><th>权重</th></tr></thead><tbody><tr><td>继承性、通配符选择器( * )</td><td>0.0.0.0</td></tr><tr><td>元素选择器、伪元素选择器</td><td>0.0.0.1</td></tr><tr><td>类选择器、伪类选择器、属性选择器</td><td>0.0.1.0</td></tr><tr><td>id 选择器</td><td>0.1.0.0</td></tr><tr><td>行内样式（style 属性）</td><td>1.0.0.0</td></tr><tr><td>!important</td><td>∞</td></tr></tbody></table><div class="hint-container tip"><p class="hint-container-title">Tips</p><ol><li>通用选择器 ( * )，组合符 (+, &gt;, ~, &#39; &#39;)，和否定伪类 (:not) <strong>不会影响</strong>优先级</li><li>若元素没有被直接选出来，则无论父元素权重多高，子元素继承父元素样式的权重都是 0</li><li>权重叠加计算在复合选择器会用到，<strong>不会有进位</strong>，即便有 20 个相加也是 0.0.0.20。权重叠加例子：.nav li = 0.0.1.0 + 0.0.0.1 = 0.0.1.1</li><li>覆盖 !important 唯一的办法就是使用另一个 !important 且具有<strong>相同优先级</strong>而且顺序靠后，或者更高优先级。建议除了非常情况不要使用它，因为它改变了层叠的常规工作方式，会使调试 CSS 问题非常困难，特别是在大型样式表中</li></ol></div><h3 id="样式表的优先级" tabindex="-1"><a class="header-anchor" href="#样式表的优先级" aria-hidden="true">#</a> <strong>样式表的优先级</strong></h3><p>样式表种类:</p><ol><li>用户代理样式表（User Agent Style Sheets），例如浏览器的默认样式</li><li>作者样式表（Author Style Sheets），Web 开发人员创建的样式表</li><li>用户样式表（User Style Sheets），浏览网页的用户自定义的样式表，如视力受损的用户可自定义放大字体的样式表</li></ol><table><thead><tr><th>样式表优先级（从上往下由低到高）</th></tr></thead><tbody><tr><td><strong>用户代理</strong>样式表中的声明</td></tr><tr><td><strong>用户</strong> 样式表中的常规声明</td></tr><tr><td><strong>作者</strong> 样式表中的常规声明</td></tr><tr><td><strong>作者</strong> 样式表中的 !important 声明</td></tr><tr><td><strong>用户</strong> 样式表中的 !important 声明</td></tr><tr><td><strong>用户代理</strong> 样式表中的 !important 声明</td></tr></tbody></table><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> <strong>参考</strong></h2>`,17),N={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Cascade",target:"_blank",rel:"noopener noreferrer"},z={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/inheritance",target:"_blank",rel:"noopener noreferrer"},E={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity",target:"_blank",rel:"noopener noreferrer"};function B(W,I){const n=l("ExternalLinkIcon");return s(),o("div",null,[c,p,S,d(" more "),g,t("div",_,[u,t("p",null,[e("MDN 网站中的 "),t("a",b,[e("CSS 参考"),r(n)]),e("页面中，按"),C,e("的顺序整理了所有标准 CSS 属性，可查询每个属性的形式定义内容，其中就包括是否默认继承，例如字体颜色属性 "),t("a",f,[e("color"),r(n)])])]),v,t("div",m,[x,t("p",null,[e("这两个属性决定如何处理文档中的双书写方向文本（bidirectional text），"),t("a",k,[e("了解更多"),r(n)])])]),y,t("ul",null,[t("li",null,[t("a",N,[e("MDN：CSS 层叠性"),r(n)])]),t("li",null,[t("a",z,[e("MDN：CSS 继承性"),r(n)])]),t("li",null,[t("a",E,[e("MDN：CSS 优先级"),r(n)])])])])}const D=a(h,[["render",B],["__file","CSS三大特性.html.vue"]]);export{D as default};
