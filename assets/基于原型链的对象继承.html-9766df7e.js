const t=JSON.parse('{"key":"v-dd0d3cbc","path":"/en/blogs/JavaScript/%E5%9F%BA%E4%BA%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%9A%84%E5%AF%B9%E8%B1%A1%E7%BB%A7%E6%89%BF.html","title":"基于原型链的对象继承","lang":"en-US","frontmatter":{"icon":"edit","date":"2022-09-28T00:00:00.000Z","category":["JavaScript"],"tag":["原型链","原型对象","对象继承"],"star":true,"description":"基于原型链的对象继承 前言 A 对象通过继承 B 对象，就能直接拥有 B 对象的所有属性和方法，这是面向对象编程很重要的一个方面，也对代码复用非常有用 大部分面向对象的编程语言，都是通过 “类”（class）实现对象的继承，而 JavaScript 则是通过原型对象（prototype）实现对象的继承，因此本文将介绍原型链的继承机制以及构造函数的继承方法","head":[["meta",{"property":"og:url","content":"https://asoaro.github.io/en/blogs/JavaScript/%E5%9F%BA%E4%BA%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%9A%84%E5%AF%B9%E8%B1%A1%E7%BB%A7%E6%89%BF.html"}],["meta",{"property":"og:site_name","content":"Kingshow Big Data"}],["meta",{"property":"og:title","content":"基于原型链的对象继承"}],["meta",{"property":"og:description","content":"基于原型链的对象继承 前言 A 对象通过继承 B 对象，就能直接拥有 B 对象的所有属性和方法，这是面向对象编程很重要的一个方面，也对代码复用非常有用 大部分面向对象的编程语言，都是通过 “类”（class）实现对象的继承，而 JavaScript 则是通过原型对象（prototype）实现对象的继承，因此本文将介绍原型链的继承机制以及构造函数的继承方法"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-02-29T06:05:36.000Z"}],["meta",{"property":"article:tag","content":"原型链"}],["meta",{"property":"article:tag","content":"原型对象"}],["meta",{"property":"article:tag","content":"对象继承"}],["meta",{"property":"article:published_time","content":"2022-09-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-29T06:05:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基于原型链的对象继承\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-09-28T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-29T06:05:36.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"原型链","slug":"原型链","link":"#原型链","children":[{"level":3,"title":"一、构造函数的缺点","slug":"一、构造函数的缺点","link":"#一、构造函数的缺点","children":[]},{"level":3,"title":"二、原型对象（prototype 属性）","slug":"二、原型对象-prototype-属性","link":"#二、原型对象-prototype-属性","children":[]},{"level":3,"title":"三、__proto__ 属性","slug":"三、-proto-属性","link":"#三、-proto-属性","children":[]},{"level":3,"title":"四、constructor 属性","slug":"四、constructor-属性","link":"#四、constructor-属性","children":[]},{"level":3,"title":"五、原型链","slug":"五、原型链","link":"#五、原型链","children":[]},{"level":3,"title":"六、原型链图解","slug":"六、原型链图解","link":"#六、原型链图解","children":[]}]},{"level":2,"title":"构造函数的继承","slug":"构造函数的继承","link":"#构造函数的继承","children":[{"level":3,"title":"一、整体继承","slug":"一、整体继承","link":"#一、整体继承","children":[]},{"level":3,"title":"二、单独继承某个属性/方法","slug":"二、单独继承某个属性-方法","link":"#二、单独继承某个属性-方法","children":[]}]},{"level":2,"title":"多重继承","slug":"多重继承","link":"#多重继承","children":[]}],"git":{"createdTime":1709186736000,"updatedTime":1709186736000,"contributors":[{"name":"景秀大数据","email":"35138076+asoaro@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":11.16,"words":3349},"filePathRelative":"en/blogs/JavaScript/基于原型链的对象继承.md","localizedDate":"September 28, 2022","excerpt":"<h1> 基于原型链的对象继承</h1>\\n<h2> 前言</h2>\\n<p>A 对象通过继承 B 对象，就能直接拥有 B 对象的所有属性和方法，这是<strong>面向对象编程</strong>很重要的一个方面，也对<strong>代码复用</strong>非常有用</p>\\n<p>大部分面向对象的编程语言，都是通过 <strong>“类”</strong>（class）实现对象的继承，而 <strong>JavaScript</strong> 则是通过<strong>原型对象</strong>（prototype）实现对象的继承，因此本文将介绍<i>原型链的继承机制</i>以及<i>构造函数的继承方法</i></p>\\n","copyright":{},"autoDesc":true}');export{t as data};
